// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package verifier

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// VerifierMetaData contains all meta data concerning the Verifier contract.
var VerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[32]\",\"name\":\"input\",\"type\":\"uint256[32]\"}],\"name\":\"identityVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"verifiedIdentities\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[32]\",\"name\":\"input\",\"type\":\"uint256[32]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061353e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631a224f98146100515780633cc08b241461006d578063a53cf4091461009d578063b9209e33146100cd575b600080fd5b61006b60048036038101906100669190612ca1565b6100fd565b005b61008760048036038101906100829190612ca1565b6101a5565b6040516100949190612d25565b60405180910390f35b6100b760048036038101906100b29190612d9e565b612041565b6040516100c49190612d25565b60405180910390f35b6100e760048036038101906100e29190612d9e565b612061565b6040516100f49190612d25565b60405180910390f35b610109848484846101a5565b610148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013f90612e28565b60405180910390fd5b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b60006101af612908565b6040518060400160405280876000600281106101ce576101cd612e48565b5b60200201518152602001876001600281106101ec576101eb612e48565b5b60200201518152508160000181905250604051806040016040528060405180604001604052808860006002811061022657610225612e48565b5b602002015160006002811061023e5761023d612e48565b5b602002015181526020018860006002811061025c5761025b612e48565b5b602002015160016002811061027457610273612e48565b5b602002015181525081526020016040518060400160405280886001600281106102a05761029f612e48565b5b60200201516000600281106102b8576102b7612e48565b5b60200201518152602001886001600281106102d6576102d5612e48565b5b60200201516001600281106102ee576102ed612e48565b5b602002015181525081525081602001819052506040518060400160405280856000600281106103205761031f612e48565b5b602002015181526020018560016002811061033e5761033d612e48565b5b602002015181525081604001819052507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47816000015160000151106103b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103af90612ec3565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781600001516020015110610422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041990612f2f565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781602001516000015160006002811061045f5761045e612e48565b5b6020020151106104a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049b90612f9b565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478160200151602001516000600281106104e1576104e0612e48565b5b602002015110610526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051d90613007565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781602001516000015160016002811061056357610562612e48565b5b6020020151106105a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059f90613073565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478160200151602001516001600281106105e5576105e4612e48565b5b60200201511061062a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610621906130df565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781604001516000015110610694576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068b9061314b565b60405180910390fd5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47816040015160200151106106fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f5906131b7565b60405180910390fd5b60005b6020811015610796577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184826020811061073e5761073d612e48565b5b602002013510610783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077a90613223565b60405180910390fd5b808061078e90613272565b915050610701565b5060006107a16120b6565b90506000604051806040016040528060008152602001600081525090506107c661293b565b6107ce61295d565b6000604051806040016040528060008152602001600081525090507f1359ffd34ebf546906885c287cd538eb4c74a7b71209cdbc4efe952289a452d48460000181815250507f0a989af90661b881ead9e65400f3af0a79cadd0bbea11c5f13699a2d1bb243b18460200181815250507f07af145f9b9ea639d34c00021a1daec497ac2c36302137591341b833a1807eda8260006003811061087257610871612e48565b5b6020020181815250507f0709439e5787295d036a8e8dd2a0b0ad35213a275cbe93d797df0a00f616c9ff826001600381106108b0576108af612e48565b5b602002018181525050876000602081106108cd576108cc612e48565b5b6020020135826002600381106108e6576108e5612e48565b5b6020020181815250506108fb8282858761236c565b7f2ffedc1261fd0e845ac42ba082eae2fc3a8678c43e7a6e706025c7178d5a24d5826000600381106109305761092f612e48565b5b6020020181815250507f242b5ec9a716a890ba9b18c14964d595ca8d4663c79dfe67e410db80d36dad928260016003811061096e5761096d612e48565b5b6020020181815250508760016020811061098b5761098a612e48565b5b6020020135826002600381106109a4576109a3612e48565b5b6020020181815250506109b98282858761236c565b7f29e43f6bb6490451036f20847194720c8ce7cbfae7e274d7079cdb23d3ea25fa826000600381106109ee576109ed612e48565b5b6020020181815250507f05b84e22eded728bf3173e8e7f803d01aae1a94033baf395660e11178a46884682600160038110610a2c57610a2b612e48565b5b60200201818152505087600260208110610a4957610a48612e48565b5b602002013582600260038110610a6257610a61612e48565b5b602002018181525050610a778282858761236c565b7f2e3a90c4c0b5fe5588e5992da1c9d9e8a46de510e3d2f91ea414e2c1cdb9cb8782600060038110610aac57610aab612e48565b5b6020020181815250507f1a4f19458aa04300dbfa329651960501e6aa339f6ede58fc68f23cc171b65e0e82600160038110610aea57610ae9612e48565b5b60200201818152505087600360208110610b0757610b06612e48565b5b602002013582600260038110610b2057610b1f612e48565b5b602002018181525050610b358282858761236c565b7f0a5f5b0cc41869224142a0855ae17c5823f32f192001db0fc74157d4228dfa1782600060038110610b6a57610b69612e48565b5b6020020181815250507f280e8ca4b560802197e0635c94112b542c20093c4da64addc93fb14a957c5ae382600160038110610ba857610ba7612e48565b5b60200201818152505087600460208110610bc557610bc4612e48565b5b602002013582600260038110610bde57610bdd612e48565b5b602002018181525050610bf38282858761236c565b7f2944575a8f3345dbaf19ddd722a794fa361b137653680c2ef558cdcf6f93c47082600060038110610c2857610c27612e48565b5b6020020181815250507f02ff4f9a19093aa9a7b5c6289532ec9a15fc8e49643ec3eed10fb5eae74c85e782600160038110610c6657610c65612e48565b5b60200201818152505087600560208110610c8357610c82612e48565b5b602002013582600260038110610c9c57610c9b612e48565b5b602002018181525050610cb18282858761236c565b7f217cc41245fdf734aa800ea2060348dc8bf3ab46a3d12f05700079efed1a9fe682600060038110610ce657610ce5612e48565b5b6020020181815250507f1af699aecba8d22447b9ad1d0d3d5b9cafe410ed048a7614652e546283f8897c82600160038110610d2457610d23612e48565b5b60200201818152505087600660208110610d4157610d40612e48565b5b602002013582600260038110610d5a57610d59612e48565b5b602002018181525050610d6f8282858761236c565b7f24db9ff5b3753a037048ee715b165d4393c9a111b8c4b57b0d54d154716bbf5982600060038110610da457610da3612e48565b5b6020020181815250507f2edbb5efa02d86d14aa55210235cd4e3ead6999ca744cfd1eb82b91e18bac3fc82600160038110610de257610de1612e48565b5b60200201818152505087600760208110610dff57610dfe612e48565b5b602002013582600260038110610e1857610e17612e48565b5b602002018181525050610e2d8282858761236c565b7f1c37a0090e75d948143f759275f2e14fcb608bbf98fd30425bfa264f08a41d6f82600060038110610e6257610e61612e48565b5b6020020181815250507f2844541c0e826671b98b666d78febd037e0628ebc29ece5a2fab7e2b2e57851882600160038110610ea057610e9f612e48565b5b60200201818152505087600860208110610ebd57610ebc612e48565b5b602002013582600260038110610ed657610ed5612e48565b5b602002018181525050610eeb8282858761236c565b7f21c9198a105880f28b65d4cdff199c2eb1337a614dc302ba6615550f10606e9682600060038110610f2057610f1f612e48565b5b6020020181815250507f13fddeaeb00ce756b5140c3fe8c77416b473d9b9cf5bb2690f6ba5e6949e508d82600160038110610f5e57610f5d612e48565b5b60200201818152505087600960208110610f7b57610f7a612e48565b5b602002013582600260038110610f9457610f93612e48565b5b602002018181525050610fa98282858761236c565b7f2f3d28a2b134cf89a30b5222181704a200a19e2dae0b5ebff6b904e50bcea15b82600060038110610fde57610fdd612e48565b5b6020020181815250507f12e3e4cd461ca5d6e6e4168276df0d0745219c77706c68ac4ed46f9501ff05b98260016003811061101c5761101b612e48565b5b60200201818152505087600a6020811061103957611038612e48565b5b60200201358260026003811061105257611051612e48565b5b6020020181815250506110678282858761236c565b7f0c32525358183b1940ced3e02078198e0a1d1370850d7d6c6da216a45760d5828260006003811061109c5761109b612e48565b5b6020020181815250507f22da80cd8ee4d6b685ec5ef6d01cc600dc75c71ccadaa058d0b53d9e3454a204826001600381106110da576110d9612e48565b5b60200201818152505087600b602081106110f7576110f6612e48565b5b6020020135826002600381106111105761110f612e48565b5b6020020181815250506111258282858761236c565b7f2096f25cd9dbcc1d5d26522c8fd4d794a0fb7a04144184f9b2aeffd7116352758260006003811061115a57611159612e48565b5b6020020181815250507f05963a57788c0b064f915e2ccc7fea23acd5101bb7dc5f73ce83af513450e7428260016003811061119857611197612e48565b5b60200201818152505087600c602081106111b5576111b4612e48565b5b6020020135826002600381106111ce576111cd612e48565b5b6020020181815250506111e38282858761236c565b7f18845efd4280bdfb641f0bccda34371cc69f2981ede83468b2f89dc7fd9dc8d58260006003811061121857611217612e48565b5b6020020181815250507f261b907a33f8be073539cbf5973e533b480c6ba523fbcc35fbad58f25f20fb908260016003811061125657611255612e48565b5b60200201818152505087600d6020811061127357611272612e48565b5b60200201358260026003811061128c5761128b612e48565b5b6020020181815250506112a18282858761236c565b7f27bbee53893a654e1a48c19015e05c04f3d50a5c506682472c2b5e0343054916826000600381106112d6576112d5612e48565b5b6020020181815250507f20b0b9a50bf85a86f5efb6d59e3468170298b869af8cd215058f748d4077cd978260016003811061131457611313612e48565b5b60200201818152505087600e6020811061133157611330612e48565b5b60200201358260026003811061134a57611349612e48565b5b60200201818152505061135f8282858761236c565b7f11f4a23614f41fd79f0ee652343bc3dc5132114a33131a38c7b30994e5fff4958260006003811061139457611393612e48565b5b6020020181815250507f135b435f4c20d6f205189f0902c1f4c933fec8256ceb55e4eddf1b8825c5761f826001600381106113d2576113d1612e48565b5b60200201818152505087600f602081106113ef576113ee612e48565b5b60200201358260026003811061140857611407612e48565b5b60200201818152505061141d8282858761236c565b7f029145e60999529e684c36c7caf0f78460374fa6dbf950d7c38f9faac45095a88260006003811061145257611451612e48565b5b6020020181815250507f0ad7e05959dd39b5272d46124fc270c87c2d65a2f04d507fe58c2d5f67b5437d826001600381106114905761148f612e48565b5b602002018181525050876010602081106114ad576114ac612e48565b5b6020020135826002600381106114c6576114c5612e48565b5b6020020181815250506114db8282858761236c565b7f070ee388143ccfa122c462f30a948133f86e391c7f2de97fe821ba12b361dff1826000600381106115105761150f612e48565b5b6020020181815250507f12e195c09b304130fee356a66feefef681973b6b2bb8aa91fac6ff0d4b9f4c9d8260016003811061154e5761154d612e48565b5b6020020181815250508760116020811061156b5761156a612e48565b5b60200201358260026003811061158457611583612e48565b5b6020020181815250506115998282858761236c565b7f0ff3760b77a2e754b8b2e8f88a79a8265123bb8373412512f169f31492c868c8826000600381106115ce576115cd612e48565b5b6020020181815250507f1249a19b12bf2122f196bda2ade46eaf186b98a9a5bb52d5d42734b1f32df9188260016003811061160c5761160b612e48565b5b6020020181815250508760126020811061162957611628612e48565b5b60200201358260026003811061164257611641612e48565b5b6020020181815250506116578282858761236c565b7f0567d055cb9c196be3fe161af3ce8e5797b1f2c498319171b6a4a164939196d68260006003811061168c5761168b612e48565b5b6020020181815250507f190bec2714428daa7666d5f3675cf5b33de0da6f94ef88fe3eb58cd560b46d54826001600381106116ca576116c9612e48565b5b602002018181525050876013602081106116e7576116e6612e48565b5b602002013582600260038110611700576116ff612e48565b5b6020020181815250506117158282858761236c565b7f2ac745fcfd7c3bd73554df0a8199f4cba045c97935b44c714b6e9e32d6c57b988260006003811061174a57611749612e48565b5b6020020181815250507f19970e61cf3fbec33957090b7f4d23e0d8ea4a01a4e2544ab60b70cdfe0d6ac18260016003811061178857611787612e48565b5b602002018181525050876014602081106117a5576117a4612e48565b5b6020020135826002600381106117be576117bd612e48565b5b6020020181815250506117d38282858761236c565b7f183e25c75c5bce71a826f620e6f59e3ef2ea607e3b5556bd56c71a18daa5a31a8260006003811061180857611807612e48565b5b6020020181815250507f26a77ee8f0d4c9986626797284aed297b7ad570210791b86db68dbdfe78fb7488260016003811061184657611845612e48565b5b6020020181815250508760156020811061186357611862612e48565b5b60200201358260026003811061187c5761187b612e48565b5b6020020181815250506118918282858761236c565b7f141776bda4ac01ff1582fa4a448b1c357e834c095009e5d1cc7bc118647f4c11826000600381106118c6576118c5612e48565b5b6020020181815250507f1a505f19b47ec11efa8758da0e88661191da652ef36e41ce2fc0140cec74f07b8260016003811061190457611903612e48565b5b6020020181815250508760166020811061192157611920612e48565b5b60200201358260026003811061193a57611939612e48565b5b60200201818152505061194f8282858761236c565b7f2916a0303552999f11d18a9b48a825484461a03fda7ba3f085533328593eb4028260006003811061198457611983612e48565b5b6020020181815250507f1295a9f4fb189f56f0cf29b85ba0d0cfacaaf54578258c2db707f470bd303168826001600381106119c2576119c1612e48565b5b602002018181525050876017602081106119df576119de612e48565b5b6020020135826002600381106119f8576119f7612e48565b5b602002018181525050611a0d8282858761236c565b7f0ddf2243c43defb0fb7f0f261d779e86f706ecfd494e012fd1a1d0403a69c0a982600060038110611a4257611a41612e48565b5b6020020181815250507f230bb9a23302ac66575179b728c7d5d7ce30092fc1e936341e38e65ce21b421e82600160038110611a8057611a7f612e48565b5b60200201818152505087601860208110611a9d57611a9c612e48565b5b602002013582600260038110611ab657611ab5612e48565b5b602002018181525050611acb8282858761236c565b7f063ec11cbe177c5e4773060f2607396ea6fc3f682810e7fa0b866fefd431528882600060038110611b0057611aff612e48565b5b6020020181815250507f21bbeba285b619c09cb6ceaa366ae0a68693ceef23aafb2ec75392d37d4620f282600160038110611b3e57611b3d612e48565b5b60200201818152505087601960208110611b5b57611b5a612e48565b5b602002013582600260038110611b7457611b73612e48565b5b602002018181525050611b898282858761236c565b7f0dc00e5bd942a88c16ffc0b6e050f21df45129349b6c7928fa522b2926df2b7c82600060038110611bbe57611bbd612e48565b5b6020020181815250507f0fd44152c6779e311b70a1dd003130315d2985a179fd0d4dc7a787de42761b3382600160038110611bfc57611bfb612e48565b5b60200201818152505087601a60208110611c1957611c18612e48565b5b602002013582600260038110611c3257611c31612e48565b5b602002018181525050611c478282858761236c565b7f2a84a66ca32b50e529b344e85ac3a7ae86d16267531e037ef4c48144d291d1e982600060038110611c7c57611c7b612e48565b5b6020020181815250507f1b700c2717ec1e01214a88dca08700c02358720845a9ed5609dd725b95a39bb782600160038110611cba57611cb9612e48565b5b60200201818152505087601b60208110611cd757611cd6612e48565b5b602002013582600260038110611cf057611cef612e48565b5b602002018181525050611d058282858761236c565b7f1fdf7a5702effef19b4881ffa42743046ef2ae495b0b83b8ab4a89614db9ee3c82600060038110611d3a57611d39612e48565b5b6020020181815250507f19cafdd881f33445706090daf633626eff25c2bf3a175de4be97324061e4278a82600160038110611d7857611d77612e48565b5b60200201818152505087601c60208110611d9557611d94612e48565b5b602002013582600260038110611dae57611dad612e48565b5b602002018181525050611dc38282858761236c565b7f2a788b660f79368ba10366bbb2c299da524596d2e1d5d709e87154fe8885b1a082600060038110611df857611df7612e48565b5b6020020181815250507f235126d1b57a11b8a365fda4c87b479a0a33fbf6e8d66a7fb366e8ce6228e79682600160038110611e3657611e35612e48565b5b60200201818152505087601d60208110611e5357611e52612e48565b5b602002013582600260038110611e6c57611e6b612e48565b5b602002018181525050611e818282858761236c565b7f222c4fd51baac03884e6a65632aad6ac5039e1663a712edf84da9e9e1b9698a582600060038110611eb657611eb5612e48565b5b6020020181815250507f0bee160151848f8e9bd29ae3c8f091c57ddde66de27dfeeef3c4977cc4b28d1682600160038110611ef457611ef3612e48565b5b60200201818152505087601e60208110611f1157611f10612e48565b5b602002013582600260038110611f2a57611f29612e48565b5b602002018181525050611f3f8282858761236c565b7f2cf38eb14ead8515328e3f3f4d579eab4f873abb471b2fbe950b7512fd90e8e782600060038110611f7457611f73612e48565b5b6020020181815250507f1445a1448776996953d317c76d29cd97cbbf12a0b2bb62a0d16d7cbb245346e682600160038110611fb257611fb1612e48565b5b60200201818152505087601f60208110611fcf57611fce612e48565b5b602002013582600260038110611fe857611fe7612e48565b5b602002018181525050611ffd8282858761236c565b61203161200d876000015161240e565b876020015187600001518860200151888a604001518c604001518c606001516124cc565b9650505050505050949350505050565b60006020528060005260406000206000915054906101000a900460ff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6120be61297f565b60405180604001604052807f048a9339315a23537cbac55d9ce3332fda6b9545970803866d05220358dcacb081526020017f2df00fcdf4cd835b065cba2182731cbe1cfd7a7b73d4460909a8a6fb8e70aad08152508160000181905250604051806040016040528060405180604001604052807f063b2361c7202bc4ee80f1980070ea4ad2599e6963dcde55b9d5723d757e98ad81526020017f151055ec2038966a37943479ff444cff19c04e7acb967f28b47130bb4e39c1b2815250815260200160405180604001604052807f076dbe698265c13eb141017c439b2733ce4972badc3d3b31750ddef8c5fce2b981526020017edc99798c6a046fc51f586079540b7f3458d10cad2ecdb2194dbdbde2d3e7ac8152508152508160200181905250604051806040016040528060405180604001604052807f090ed1e8e6abaf6c488acc843bf48c70f153dd5b0100cb96e8703bfe96231a9f81526020017f2ab793cddc2eac034f7703e736a2b9266f0e859d7335f5b04e3aeb45c9104eb3815250815260200160405180604001604052807f1d7ca96675518e04dac5028572b2cea2181be4b1709052bbaabd970d259d865d81526020017f2357fad2bd655a62d9a9ee763a0fd9fcbe657912826bedd09e4474cabb0c375d8152508152508160400181905250604051806040016040528060405180604001604052807f0f007dc25d73cb9aca548ed43bf3164f88b0e57d7a5166dcbc7e35ec908c2bb981526020017f27ee4e6db9f1ea43756839c65e1d8bfe569f14a0220729352b851cc99a221bf5815250815260200160405180604001604052807f2be889a711525e82d1d9503b1d6739cf1440cf127aca49766d205a71519572ef81526020017f2c7c595b64629be001dbec8ba18f0e82f40ea7faf4d6699234bff0004bf20297815250815250816060018190525090565b6123768484612842565b80600001518260006004811061238f5761238e612e48565b5b6020020181815250508060200151826001600481106123b1576123b0612e48565b5b6020020181815250508260000151826002600481106123d3576123d2612e48565b5b6020020181815250508260200151826003600481106123f5576123f4612e48565b5b60200201818152505061240882826128a5565b50505050565b6124166129bf565b6000826000015114801561242e575060008260200151145b1561245157604051806040016040528060008152602001600081525090506124c7565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47846020015161249691906132e9565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476124c1919061331a565b81525090505b919050565b60008060405180608001604052808b8152602001898152602001878152602001858152509050600060405180608001604052808b815260200189815260200187815260200185815250905060006018905060008167ffffffffffffffff81111561253957612538612a68565b5b6040519080825280602002602001820160405280156125675781602001602082028036833780820191505090505b50905060005b60048110156127a5576000600682612585919061334e565b905085826004811061259a57612599612e48565b5b602002015160000151836000836125b19190613390565b815181106125c2576125c1612e48565b5b6020026020010181815250508582600481106125e1576125e0612e48565b5b602002015160200151836001836125f89190613390565b8151811061260957612608612e48565b5b60200260200101818152505084826004811061262857612627612e48565b5b60200201516000015160006002811061264457612643612e48565b5b6020020151836002836126579190613390565b8151811061266857612667612e48565b5b60200260200101818152505084826004811061268757612686612e48565b5b6020020151600001516001600281106126a3576126a2612e48565b5b6020020151836003836126b69190613390565b815181106126c7576126c6612e48565b5b6020026020010181815250508482600481106126e6576126e5612e48565b5b60200201516020015160006002811061270257612701612e48565b5b6020020151836004836127159190613390565b8151811061272657612725612e48565b5b60200260200101818152505084826004811061274557612744612e48565b5b60200201516020015160016002811061276157612760612e48565b5b6020020151836005836127749190613390565b8151811061278557612784612e48565b5b60200260200101818152505050808061279d90613272565b91505061256d565b506127ae6129d9565b6000602082602086026020860160086107d05a03fa905080600081036127d057fe5b5080612811576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280890613410565b60405180910390fd5b60008260006001811061282757612826612e48565b5b60200201511415965050505050505098975050505050505050565b600060608260808560076107d05a03fa9050806000810361285f57fe5b50806128a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128979061347c565b60405180910390fd5b505050565b600060608260c08560066107d05a03fa905080600081036128c257fe5b5080612903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128fa906134e8565b60405180910390fd5b505050565b604051806060016040528061291b6129bf565b81526020016129286129fb565b81526020016129356129bf565b81525090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060600160405280600390602082028036833780820191505090505090565b60405180608001604052806129926129bf565b815260200161299f6129fb565b81526020016129ac6129fb565b81526020016129b96129fb565b81525090565b604051806040016040528060008152602001600081525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280612a0e612a21565b8152602001612a1b612a21565b81525090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612aa082612a57565b810181811067ffffffffffffffff82111715612abf57612abe612a68565b5b80604052505050565b6000612ad2612a43565b9050612ade8282612a97565b919050565b600067ffffffffffffffff821115612afe57612afd612a68565b5b602082029050919050565b600080fd5b6000819050919050565b612b2181612b0e565b8114612b2c57600080fd5b50565b600081359050612b3e81612b18565b92915050565b6000612b57612b5284612ae3565b612ac8565b90508060208402830185811115612b7157612b70612b09565b5b835b81811015612b9a5780612b868882612b2f565b845260208401935050602081019050612b73565b5050509392505050565b600082601f830112612bb957612bb8612a52565b5b6002612bc6848285612b44565b91505092915050565b600067ffffffffffffffff821115612bea57612be9612a68565b5b602082029050919050565b6000612c08612c0384612bcf565b612ac8565b90508060408402830185811115612c2257612c21612b09565b5b835b81811015612c4b5780612c378882612ba4565b845260208401935050604081019050612c24565b5050509392505050565b600082601f830112612c6a57612c69612a52565b5b6002612c77848285612bf5565b91505092915050565b6000819050826020800282011115612c9b57612c9a612b09565b5b92915050565b6000806000806105008587031215612cbc57612cbb612a4d565b5b6000612cca87828801612ba4565b9450506040612cdb87828801612c55565b93505060c0612cec87828801612ba4565b925050610100612cfe87828801612c80565b91505092959194509250565b60008115159050919050565b612d1f81612d0a565b82525050565b6000602082019050612d3a6000830184612d16565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612d6b82612d40565b9050919050565b612d7b81612d60565b8114612d8657600080fd5b50565b600081359050612d9881612d72565b92915050565b600060208284031215612db457612db3612a4d565b5b6000612dc284828501612d89565b91505092915050565b600082825260208201905092915050565b7f70726f6f66206661696c65640000000000000000000000000000000000000000600082015250565b6000612e12600c83612dcb565b9150612e1d82612ddc565b602082019050919050565b60006020820190508181036000830152612e4181612e05565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f76657269666965722d61582d6774652d7072696d652d71000000000000000000600082015250565b6000612ead601783612dcb565b9150612eb882612e77565b602082019050919050565b60006020820190508181036000830152612edc81612ea0565b9050919050565b7f76657269666965722d61592d6774652d7072696d652d71000000000000000000600082015250565b6000612f19601783612dcb565b9150612f2482612ee3565b602082019050919050565b60006020820190508181036000830152612f4881612f0c565b9050919050565b7f76657269666965722d6258302d6774652d7072696d652d710000000000000000600082015250565b6000612f85601883612dcb565b9150612f9082612f4f565b602082019050919050565b60006020820190508181036000830152612fb481612f78565b9050919050565b7f76657269666965722d6259302d6774652d7072696d652d710000000000000000600082015250565b6000612ff1601883612dcb565b9150612ffc82612fbb565b602082019050919050565b6000602082019050818103600083015261302081612fe4565b9050919050565b7f76657269666965722d6258312d6774652d7072696d652d710000000000000000600082015250565b600061305d601883612dcb565b915061306882613027565b602082019050919050565b6000602082019050818103600083015261308c81613050565b9050919050565b7f76657269666965722d6259312d6774652d7072696d652d710000000000000000600082015250565b60006130c9601883612dcb565b91506130d482613093565b602082019050919050565b600060208201905081810360008301526130f8816130bc565b9050919050565b7f76657269666965722d63582d6774652d7072696d652d71000000000000000000600082015250565b6000613135601783612dcb565b9150613140826130ff565b602082019050919050565b6000602082019050818103600083015261316481613128565b9050919050565b7f76657269666965722d63592d6774652d7072696d652d71000000000000000000600082015250565b60006131a1601783612dcb565b91506131ac8261316b565b602082019050919050565b600060208201905081810360008301526131d081613194565b9050919050565b7f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400600082015250565b600061320d601f83612dcb565b9150613218826131d7565b602082019050919050565b6000602082019050818103600083015261323c81613200565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061327d82612b0e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036132af576132ae613243565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006132f482612b0e565b91506132ff83612b0e565b92508261330f5761330e6132ba565b5b828206905092915050565b600061332582612b0e565b915061333083612b0e565b925082820390508181111561334857613347613243565b5b92915050565b600061335982612b0e565b915061336483612b0e565b925082820261337281612b0e565b9150828204841483151761338957613388613243565b5b5092915050565b600061339b82612b0e565b91506133a683612b0e565b92508282019050808211156133be576133bd613243565b5b92915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b60006133fa601583612dcb565b9150613405826133c4565b602082019050919050565b60006020820190508181036000830152613429816133ed565b9050919050565b7f70616972696e672d6d756c2d6661696c65640000000000000000000000000000600082015250565b6000613466601283612dcb565b915061347182613430565b602082019050919050565b6000602082019050818103600083015261349581613459565b9050919050565b7f70616972696e672d6164642d6661696c65640000000000000000000000000000600082015250565b60006134d2601283612dcb565b91506134dd8261349c565b602082019050919050565b60006020820190508181036000830152613501816134c5565b905091905056fea2646970667358221220c02f749a7a319cc0f932fc5990ec921b1048608391f45d475bc2d5336704207464736f6c63430008130033",
}

// VerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use VerifierMetaData.ABI instead.
var VerifierABI = VerifierMetaData.ABI

// VerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VerifierMetaData.Bin instead.
var VerifierBin = VerifierMetaData.Bin

// DeployVerifier deploys a new Ethereum contract, binding an instance of Verifier to it.
func DeployVerifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Verifier, error) {
	parsed, err := VerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VerifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// Verifier is an auto generated Go binding around an Ethereum contract.
type Verifier struct {
	VerifierCaller     // Read-only binding to the contract
	VerifierTransactor // Write-only binding to the contract
	VerifierFilterer   // Log filterer for contract events
}

// VerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type VerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VerifierSession struct {
	Contract     *Verifier         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VerifierCallerSession struct {
	Contract *VerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// VerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VerifierTransactorSession struct {
	Contract     *VerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// VerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type VerifierRaw struct {
	Contract *Verifier // Generic contract binding to access the raw methods on
}

// VerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VerifierCallerRaw struct {
	Contract *VerifierCaller // Generic read-only contract binding to access the raw methods on
}

// VerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VerifierTransactorRaw struct {
	Contract *VerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVerifier creates a new instance of Verifier, bound to a specific deployed contract.
func NewVerifier(address common.Address, backend bind.ContractBackend) (*Verifier, error) {
	contract, err := bindVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// NewVerifierCaller creates a new read-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierCaller(address common.Address, caller bind.ContractCaller) (*VerifierCaller, error) {
	contract, err := bindVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierCaller{contract: contract}, nil
}

// NewVerifierTransactor creates a new write-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*VerifierTransactor, error) {
	contract, err := bindVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierTransactor{contract: contract}, nil
}

// NewVerifierFilterer creates a new log filterer instance of Verifier, bound to a specific deployed contract.
func NewVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*VerifierFilterer, error) {
	contract, err := bindVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VerifierFilterer{contract: contract}, nil
}

// bindVerifier binds a generic wrapper to an already deployed contract.
func bindVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.VerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transact(opts, method, params...)
}

// IsVerified is a free data retrieval call binding the contract method 0xb9209e33.
//
// Solidity: function isVerified(address acc) view returns(bool r)
func (_Verifier *VerifierCaller) IsVerified(opts *bind.CallOpts, acc common.Address) (bool, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "isVerified", acc)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsVerified is a free data retrieval call binding the contract method 0xb9209e33.
//
// Solidity: function isVerified(address acc) view returns(bool r)
func (_Verifier *VerifierSession) IsVerified(acc common.Address) (bool, error) {
	return _Verifier.Contract.IsVerified(&_Verifier.CallOpts, acc)
}

// IsVerified is a free data retrieval call binding the contract method 0xb9209e33.
//
// Solidity: function isVerified(address acc) view returns(bool r)
func (_Verifier *VerifierCallerSession) IsVerified(acc common.Address) (bool, error) {
	return _Verifier.Contract.IsVerified(&_Verifier.CallOpts, acc)
}

// VerifiedIdentities is a free data retrieval call binding the contract method 0xa53cf409.
//
// Solidity: function verifiedIdentities(address ) view returns(bool)
func (_Verifier *VerifierCaller) VerifiedIdentities(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "verifiedIdentities", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifiedIdentities is a free data retrieval call binding the contract method 0xa53cf409.
//
// Solidity: function verifiedIdentities(address ) view returns(bool)
func (_Verifier *VerifierSession) VerifiedIdentities(arg0 common.Address) (bool, error) {
	return _Verifier.Contract.VerifiedIdentities(&_Verifier.CallOpts, arg0)
}

// VerifiedIdentities is a free data retrieval call binding the contract method 0xa53cf409.
//
// Solidity: function verifiedIdentities(address ) view returns(bool)
func (_Verifier *VerifierCallerSession) VerifiedIdentities(arg0 common.Address) (bool, error) {
	return _Verifier.Contract.VerifiedIdentities(&_Verifier.CallOpts, arg0)
}

// VerifyProof is a free data retrieval call binding the contract method 0x3cc08b24.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[32] input) view returns(bool r)
func (_Verifier *VerifierCaller) VerifyProof(opts *bind.CallOpts, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [32]*big.Int) (bool, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "verifyProof", a, b, c, input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyProof is a free data retrieval call binding the contract method 0x3cc08b24.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[32] input) view returns(bool r)
func (_Verifier *VerifierSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [32]*big.Int) (bool, error) {
	return _Verifier.Contract.VerifyProof(&_Verifier.CallOpts, a, b, c, input)
}

// VerifyProof is a free data retrieval call binding the contract method 0x3cc08b24.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[32] input) view returns(bool r)
func (_Verifier *VerifierCallerSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [32]*big.Int) (bool, error) {
	return _Verifier.Contract.VerifyProof(&_Verifier.CallOpts, a, b, c, input)
}

// IdentityVerification is a paid mutator transaction binding the contract method 0x1a224f98.
//
// Solidity: function identityVerification(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[32] input) returns()
func (_Verifier *VerifierTransactor) IdentityVerification(opts *bind.TransactOpts, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [32]*big.Int) (*types.Transaction, error) {
	return _Verifier.contract.Transact(opts, "identityVerification", a, b, c, input)
}

// IdentityVerification is a paid mutator transaction binding the contract method 0x1a224f98.
//
// Solidity: function identityVerification(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[32] input) returns()
func (_Verifier *VerifierSession) IdentityVerification(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [32]*big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.IdentityVerification(&_Verifier.TransactOpts, a, b, c, input)
}

// IdentityVerification is a paid mutator transaction binding the contract method 0x1a224f98.
//
// Solidity: function identityVerification(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[32] input) returns()
func (_Verifier *VerifierTransactorSession) IdentityVerification(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [32]*big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.IdentityVerification(&_Verifier.TransactOpts, a, b, c, input)
}
